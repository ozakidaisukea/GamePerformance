//=============================================================================
// 
// ゲームの処理 [game.cpp]
// Author : Mikiya Meguro
//
//=============================================================================
#include "main.h"
#include "game.h"
#include "fade.h"
#include "Player.h"
//#include "item.h"
#include "explosion.h"
#include "goal.h"
//#include "score.h"
//#include "scoreframe.h"
#include "time.h"
#include "timeframe.h"
#include "pauseselect.h"
#include "pause.h"
#include "pressenter.h"
#include "sound.h"
#include "main.h"
#include "camera.h"
#include "light.h"
#include "polygon.h"
#include "model.h"
#include "input.h"
#include "shadow.h"
#include "wall.h"
#include "billboard.h"
#include "bullet.h"
#include "meshField.h"
#include "meshWall.h"
#include "meshCylinder.h"
#include "explosion.h"
#include "effect.h"
#include "player.h"
#include "arrow.h"
#include "map.h"
#include "gauge.h"
#include "blur.h"
#include "pokuru.h"
#include "enemy.h"
#include "particle.h"
#include "obstacle.h"
#include "home.h"
#include "passage.h"
#include "car.h"
#include "inputx.h"
#include <stdlib.h>			//randに必要
#include <time.h>			//andに必要
#include "deathpizza.h"
//*****************************************************************************
// グローバル変数
//*****************************************************************************
GAMESTATE g_GameState = GAMESTATE_NONE;
int g_nCounterGameState;
bool g_bPouse;
bool g_bChange;									// 通常状態かPizzaモード状態か
SELECTMODE	*g_Pause;
int g_nCounteeCar;
JoyState g_JoyStateGame;

//アイテム配置
//ItemInfo g_aItemInfo[] =
//{		
	//コイン
	//{ D3DXVECTOR3(1550.0f, 400.0f, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), ITEMTYPE_COIN },	
//};

//*****************************************************************************
//初期化
//*****************************************************************************
void InitGame(void)
{
	g_JoyStateGame.nJoypadState = INPUT_JOYSTATE_NOTPUSH;
	//ポーズの初期化
	InitPause();
	//プレスエンター
	InitPressEnter();
	// カメラの初期化処理
	InitCamera();
	// ライトの初期化処理
	InitLight();
	// ポリゴンの初期化処理
	InitPolygon();
	// 壁の初期化処理
	//InitWall();
	// 影の初期化
	InitShadow();
	// モデルの初期化処理
	InitModel();
	// プレイヤー初期化処理
	InitPlayer();
	// 通行人の初期化
	InitPassage();
	// ビルボードの初期化処理
	InitBillboard();
	// 弾の初期化処理
	InitBullet();
	//エフェクトの初期化処理
	InitEffect();
	//爆発の初期化処理
	InitExplosion();
	//メッシュフィールドの初期化
	//InitMeshField();

	//メッシュウォールの初期化
	//InitMeshWall(0, D3DXVECTOR3(-3000, 100, 3000), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f));
	//メッシュウォールの初期化
	//InitMeshWall(1, D3DXVECTOR3(3000, 100, -3000), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f));
	//メッシュウォールの初期化
	//InitMeshWall(2, D3DXVECTOR3(3000, 100, 3000), D3DXVECTOR3(0.0f, D3DX_PI * 0.5f, 0.0f));
	//メッシュウォールの初期化
	//InitMeshWall(3, D3DXVECTOR3(-3000, 100, -3000), D3DXVECTOR3(0.0f, D3DX_PI * -0.5f, 0.0f));

	//メッシュシリンダーの初期化
	InitMeshCylinder();
	//タイム初期化
	InitTime();
	//タイムフレーム初期化
	InitTimeFrame();
	// 矢印の初期化処理
	InitArrow();
	// マップの初期化処理
	InitMap();
	// ゴールの初期化処理
	InitGoal();
	// ゲージの初期化処理
	InitGauge();
	// ブラー
	InitBlur();
	// ポックル
	InitPokuru();
	// 敵
	InitEnemy();
	// 車
	InitCar();
	// パーティクル
	InitParticle();
	//　テクスチャモデル
	InitObstacle();
	//	ホームの当たり判定
	InitHome();
	// ピザデス
	InitDeathPizza();
#if 0
	////SetWall(D3DXVECTOR3(0.0f, 0.0f, FIELD_SIZE), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), FIELD_SIZE / 2, FIELD_SIZE);
	//SetWall(D3DXVECTOR3(0.0f, 0.0f, -FIELD_SIZE), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), FIELD_SIZE / 2, FIELD_SIZE);
	//SetWall(D3DXVECTOR3(FIELD_SIZE, 0.0f, 0.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.5f, 0.0f), FIELD_SIZE / 2, FIELD_SIZE);
	//SetWall(D3DXVECTOR3(-FIELD_SIZE, 0.0f, 0.0f), D3DXVECTOR3(0.0f, D3DX_PI * -0.5f, 0.0f), FIELD_SIZE / 2, FIELD_SIZE);
	//ビルボード
	SetBillboard(D3DXVECTOR3(-50.0f, 0.0f, 150.0f), 30.0f, 100);
	SetBillboard(D3DXVECTOR3(50.0f, 0.0f, 150.0f), 30.0f, 100);
	SetBillboard(D3DXVECTOR3(150.0f, 0.0f, 150.0f), 30.0f, 100);
#endif
	//地面
	SetPolygon(D3DXVECTOR3(0, 0, 0));		//左下エリア
	SetPolygon(D3DXVECTOR3(6000, 0, 0));	//右下エリア
	SetPolygon(D3DXVECTOR3(0, 0, 6000));	//左上エリア
	SetPolygon(D3DXVECTOR3(6000, 0, 6000));	//右上エリア

	//オブジェクトの配置　（オブジェクトの種類横並び）　縦横の種類有　
	/*	縦横の種類がある建物の rot(回転) は180度反転のみ可	
		rotの例↓
		正面
		D3DXVECTOR3(0, D3DX_PI * 0.0f, 0)
		後ろ向き
		D3DXVECTOR3(0, D3DX_PI * 1.0f, 0)
		右向き
		D3DXVECTOR3(0, D3DX_PI * -0.5f, 0)
		左向き
		D3DXVECTOR3(0, D3DX_PI* 0.5f, 0)
	*/
	//オブジェクトの種類一覧
#if 0
	SetObstacle(D3DXVECTOR3(-3000, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZA);//0
	SetObstacle(D3DXVECTOR3(-2500, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZA_YOKO);//1
	SetObstacle(D3DXVECTOR3(-2200, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE000);//2
	SetObstacle(D3DXVECTOR3(-1900, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE000_YOKO);//3
	SetObstacle(D3DXVECTOR3(-1600, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE001);//4
	SetObstacle(D3DXVECTOR3(-1300, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE001_YOKO);//5
	SetObstacle(D3DXVECTOR3(-950, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE002);//6
	SetObstacle(D3DXVECTOR3(-600, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE003);//7
	SetObstacle(D3DXVECTOR3(-300, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE003_YOKO);//8
	SetObstacle(D3DXVECTOR3(0, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE004);//9
	SetObstacle(D3DXVECTOR3(300, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE004_YOKO);//10
	SetObstacle(D3DXVECTOR3(600, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE005);//11
	SetObstacle(D3DXVECTOR3(900, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE005_YOKO);//12
	SetObstacle(D3DXVECTOR3(1200, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE006);//13
	SetObstacle(D3DXVECTOR3(1500, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE006_YOKO);//14
	SetObstacle(D3DXVECTOR3(1800, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE007);//15
	SetObstacle(D3DXVECTOR3(2100, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE007_YOKO);//16
	SetObstacle(D3DXVECTOR3(2500, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE008);//17
	SetObstacle(D3DXVECTOR3(3000, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE008_YOKO);//18
	SetObstacle(D3DXVECTOR3(3600, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE009);//19
	SetObstacle(D3DXVECTOR3(4200, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE009_YOKO);//20
	SetObstacle(D3DXVECTOR3(4700, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HAIKYO);//21
	SetObstacle(D3DXVECTOR3(5000, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_POKKURUZOU);//22
	SetObstacle(D3DXVECTOR3(5400, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOSPITAL);//23
	SetObstacle(D3DXVECTOR3(5900, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOSPITAL_YOKO);//24
	SetObstacle(D3DXVECTOR3(4600, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_TEMPLE);//25
	//SetObstacle(D3DXVECTOR3(4600, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_TEMPLE_YOKO);//26
	SetObstacle(D3DXVECTOR3(5000, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SKYTREE);//27
	SetObstacle(D3DXVECTOR3(5400, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZASYATOU);//28
	//SetObstacle(D3DXVECTOR3(-900, 0, 300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29
	//SetObstacle(D3DXVECTOR3(-1300, 0, 1900), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001);//30
	//SetObstacle(D3DXVECTOR3(-1900, 0, 1900), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002);//31
	SetObstacle(D3DXVECTOR3(5900, 0, 1900), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KAMINARIMON);//32
	//SetObstacle(D3DXVECTOR3(5900, 0, 1900), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KAMINARIMON);33
	//後ろ確かめ用
	//SetObstacle(D3DXVECTOR3(500, 0, 2600), D3DXVECTOR3(0, D3DX_PI* 1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	//左確かめ用
	//SetObstacle(D3DXVECTOR3(0, 0, 2600), D3DXVECTOR3(0, D3DX_PI* 0.5f, 0), OBSTACLE_TYPE_OFFICE000);
	//右確かめ用
	//SetObstacle(D3DXVECTOR3(-500, 0, 2600), D3DXVECTOR3(0, D3DX_PI*  -0.5f, 0), OBSTACLE_TYPE_OFFICE000);
#endif

	//目黒担当エリア	（混合エリア左上）
#if 1
	//横2マスエリア
	SetObstacle(D3DXVECTOR3(-580, 0, 6500), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(-580, 0, 6730), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(-850, 0, 6530), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-880, 0, 6730), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-1230, 0, 6530), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-1230, 0, 6730), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-1500, 0, 6650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE008_YOKO);

	SetObstacle(D3DXVECTOR3(1030, 0, 4800), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(1030, 0, 5030), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(1300, 0, 4830), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1310, 0, 5030), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(1680, 0, 4830), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(1680, 0, 5030), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1950, 0, 4930), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);

	SetObstacle(D3DXVECTOR3(-1580, 0, 5780), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE009);
	SetObstacle(D3DXVECTOR3(-1970, 0, 5650), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(-1970, 0, 5879), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(-2330, 0, 5670), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(-2300, 0, 5899), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(-2500, 0, 5799), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);

	SetObstacle(D3DXVECTOR3(1980, 0, 7500), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE009);
	SetObstacle(D3DXVECTOR3(2390, 0, 7370), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(2360, 0, 7599), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(2750, 0, 7390), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(2720, 0, 7589), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(2930, 0, 7519), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);

	SetObstacle(D3DXVECTOR3(180, 0, 7390), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(160, 0, 7590), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(470, 0, 7390), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(480, 0, 7610), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(800, 0, 7390), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(800, 0, 7610), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1100, 0, 7500), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);

	SetObstacle(D3DXVECTOR3(-1480, 0, 3090), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(-1460, 0, 3290), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(-1780, 0, 3090), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-1780, 0, 3310), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2140, 0, 3090), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2100, 0, 3310), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-2400, 0, 3200), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);

	SetObstacle(D3DXVECTOR3(930, 0, 8360), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(1150, 0, 8460), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(1150, 0, 8260), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(1440, 0, 8460), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(1440, 0, 8260), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(1750, 0, 8460), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1740, 0, 8260), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(1990, 0, 8350), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE001);

	//ビルセット
	SetObstacle(D3DXVECTOR3(1930, 0, 5780), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	SetObstacle(D3DXVECTOR3(2285, 0, 5780), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	SetObstacle(D3DXVECTOR3(2610, 0, 5780), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE001);
	SetObstacle(D3DXVECTOR3(2850, 0, 5780), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE001);
	
	SetObstacle(D3DXVECTOR3(1930, 0, 3230), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	SetObstacle(D3DXVECTOR3(2285, 0, 3230), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	SetObstacle(D3DXVECTOR3(2610, 0, 3230), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE001);
	SetObstacle(D3DXVECTOR3(2850, 0, 3230), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE001);
	
	//縦2マス
	SetObstacle(D3DXVECTOR3(200, 0, 4050), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008);
	SetObstacle(D3DXVECTOR3(120, 0, 4710), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(280, 0, 4730), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(190, 0, 4400), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(200, 0, 5000), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008);

	SetObstacle(D3DXVECTOR3(1060, 0, 3180), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008);
	SetObstacle(D3DXVECTOR3(980, 0, 3840), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(1130, 0, 3860), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(1050, 0, 3530), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(1060, 0, 4130), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008);

	SetObstacle(D3DXVECTOR3(-2360, 0, 8430), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2450, 0, 8180), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003_YOKO);
	SetObstacle(D3DXVECTOR3(-2270, 0, 8180), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);
	SetObstacle(D3DXVECTOR3(-2450, 0, 7900), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-2270, 0, 7920), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-2450, 0, 7620), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-2270, 0, 7670), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-2360, 0, 7430), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE000);

	SetObstacle(D3DXVECTOR3(-1510, 0, 8300), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008);
	//SetObstacle(D3DXVECTOR3(-1590, 0, 8600), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(-1430, 0, 8560), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-1590, 0, 8580), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-1440, 0, 8860), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);
	SetObstacle(D3DXVECTOR3(-1590, 0, 8860), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);

	SetObstacle(D3DXVECTOR3(-640, 0, 8430), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-570, 0, 8180), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003_YOKO);
	SetObstacle(D3DXVECTOR3(-720, 0, 8180), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);
	SetObstacle(D3DXVECTOR3(-570, 0, 7900), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-750, 0, 7920), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-570, 0, 7620), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-750, 0, 7670), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-640, 0, 7430), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE000);

	//ビル
	SetObstacle(D3DXVECTOR3(-670, 0, 3880), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE002_YOKO);
	SetObstacle(D3DXVECTOR3(-670, 0, 3280), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_OFFICE000);
	
	SetObstacle(D3DXVECTOR3(-670, 0, 5550), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE002_YOKO);
	SetObstacle(D3DXVECTOR3(-670, 0, 4950), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_OFFICE000);

	SetObstacle(D3DXVECTOR3(2780, 0, 5000), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE001_YOKO);
	SetObstacle(D3DXVECTOR3(2780, 0, 4750), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE001_YOKO);
	SetObstacle(D3DXVECTOR3(2780, 0, 4410), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE001_YOKO);
	SetObstacle(D3DXVECTOR3(2780, 0, 4100), D3DXVECTOR3(0, D3DX_PI*-0.5f, 0), OBSTACLE_TYPE_OFFICE000);

	//１マス
	SetObstacle(D3DXVECTOR3(2780, 0, 6650), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_PIZZASYATOU);
	
	SetObstacle(D3DXVECTOR3(1910, 0, 6650), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_POKKURUZOU);
	
	SetObstacle(D3DXVECTOR3(200, 0, 3200), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_PIZZASYATOU);
	
	SetObstacle(D3DXVECTOR3(1920, 0, 4050), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HAIKYO);

	SetObstacle(D3DXVECTOR3(-2360, 0, 6550), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-2360, 0, 6750), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);

	SetObstacle(D3DXVECTOR3(-1500, 0, 7400), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(-1500, 0, 7600), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006);
	
	SetObstacle(D3DXVECTOR3(220, 0, 8460), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(220, 0, 8260), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);

	SetObstacle(D3DXVECTOR3(2780, 0, 8450), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(2780, 0, 8250), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	//大マス
	SetObstacle(D3DXVECTOR3(750, 0, 6660), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOSPITAL);
	SetObstacle(D3DXVECTOR3(210, 0, 6382.5f), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOSPITAL_YOKO);
	SetObstacle(D3DXVECTOR3(503, 0, 5760), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOSPITAL);
	SetObstacle(D3DXVECTOR3(1040, 0, 6040), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOSPITAL_YOKO);
	SetObstacle(D3DXVECTOR3(640, 0, 6250), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_POKKURUZOU);


	SetObstacle(D3DXVECTOR3(-1460, 0, 4990), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(-1780, 0, 5010), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2100, 0, 5010), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);

	SetObstacle(D3DXVECTOR3(-2400, 0, 4900), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);	
	SetObstacle(D3DXVECTOR3(-2410, 0, 4250), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);

	SetObstacle(D3DXVECTOR3(-2410, 0, 4540), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE000_YOKO);
	SetObstacle(D3DXVECTOR3(-1450, 0, 4240), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-1450, 0, 4490), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003_YOKO);
	SetObstacle(D3DXVECTOR3(-1420, 0, 4750), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);

	SetObstacle(D3DXVECTOR3(-1510, 0, 3990), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(-1790, 0, 3990), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(-2090, 0, 3990), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2380, 0, 3990), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);

	SetObstacle(D3DXVECTOR3(-1790, 0, 4350), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(-2100, 0, 4350), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(-1790, 0, 4660), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(-2100, 0, 4660), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);

#endif
	//稲井担当エリア	（ビルエリア右上）
#if 1
	SetObstacle(D3DXVECTOR3(8820, 0, 8360), D3DXVECTOR3(0, D3DX_PI * 0.5f, 0), OBSTACLE_TYPE_OFFICE000);//29　中
	SetObstacle(D3DXVECTOR3(8830, 0, 7500), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE001);//30　小
	SetObstacle(D3DXVECTOR3(8330, 0, 7500), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002);//31　大

	SetObstacle(D3DXVECTOR3(5350, 0, 8360), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE000);//29 2
	SetObstacle(D3DXVECTOR3(5350, 0, 7500), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 3
	SetObstacle(D3DXVECTOR3(5350, 0, 7930), D3DXVECTOR3(0, D3DX_PI* 0.5f, 0), OBSTACLE_TYPE_OFFICE000);//29 4
	SetObstacle(D3DXVECTOR3(4490, 0, 8360), D3DXVECTOR3(0, D3DX_PI* 0.5f, 0), OBSTACLE_TYPE_OFFICE000);//29 5
	SetObstacle(D3DXVECTOR3(4490, 0, 8800), D3DXVECTOR3(0, D3DX_PI* 0.5f, 0), OBSTACLE_TYPE_OFFICE000);//29 6
	SetObstacle(D3DXVECTOR3(4490, 0, 7500), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 7
	SetObstacle(D3DXVECTOR3(8820, 0, 6650), D3DXVECTOR3(0, D3DX_PI* 0.5f, 0), OBSTACLE_TYPE_OFFICE000);//29 8
	SetObstacle(D3DXVECTOR3(7930, 0, 6650), D3DXVECTOR3(0, D3DX_PI* 1.0f, 0), OBSTACLE_TYPE_OFFICE000);//29 9
	SetObstacle(D3DXVECTOR3(8810, 0, 5790), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 10
	SetObstacle(D3DXVECTOR3(7950, 0, 5790), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 11
	SetObstacle(D3DXVECTOR3(8020, 0, 3215), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 12
	SetObstacle(D3DXVECTOR3(7930, 0, 4070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 13
	SetObstacle(D3DXVECTOR3(3640, 0, 3215), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 14
	SetObstacle(D3DXVECTOR3(3640, 0, 6650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 15
	SetObstacle(D3DXVECTOR3(4490, 0, 5790), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE000);//29 16
	SetObstacle(D3DXVECTOR3(7075, 0, 3215), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 17
	SetObstacle(D3DXVECTOR3(6215, 0, 3215), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 18
	SetObstacle(D3DXVECTOR3(5350, 0, 3215), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE000);//29 19
	SetObstacle(D3DXVECTOR3(4470, 0, 3215), D3DXVECTOR3(0, D3DX_PI * -0.5f, 0), OBSTACLE_TYPE_OFFICE000);//29 20
	SetObstacle(D3DXVECTOR3(6210, 0, 4500), D3DXVECTOR3(0, D3DX_PI * -0.5f, 0), OBSTACLE_TYPE_OFFICE000);//29 21
	SetObstacle(D3DXVECTOR3(7920, 0, 4920), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE000);//29 11

	SetObstacle(D3DXVECTOR3(6215, 0, 8360), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001);//30 2
	SetObstacle(D3DXVECTOR3(7120, 0, 7500), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE001);//30 3
	SetObstacle(D3DXVECTOR3(6160, 0, 7500), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE001);//30 4
	SetObstacle(D3DXVECTOR3(8360, 0, 5790), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001);//30 5
	SetObstacle(D3DXVECTOR3(8820, 0, 4050), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001_YOKO);//30 6
	SetObstacle(D3DXVECTOR3(3640, 0, 7500), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001_YOKO);//30 7
	SetObstacle(D3DXVECTOR3(4060, 0, 3215), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001);//30 8
	SetObstacle(D3DXVECTOR3(6260, 0, 4080), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001);//30 9
	SetObstacle(D3DXVECTOR3(6160, 0, 4080), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001);//30 10
	SetObstacle(D3DXVECTOR3(6260, 0, 4920), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE001);//30 11
	SetObstacle(D3DXVECTOR3(6160, 0, 4920), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE001);//30 12
	SetObstacle(D3DXVECTOR3(7075, 0, 3920), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE001_YOKO);//30 13
	SetObstacle(D3DXVECTOR3(7075, 0, 4120), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE001_YOKO);//30 14
	SetObstacle(D3DXVECTOR3(7075, 0, 3595), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE001_YOKO);//30 15

	SetObstacle(D3DXVECTOR3(8100, 0, 7500), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002);//31 2
	SetObstacle(D3DXVECTOR3(7800, 0, 8360), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002);//31 3
	SetObstacle(D3DXVECTOR3(7250, 0, 8360), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002);//31 4
	SetObstacle(D3DXVECTOR3(6640, 0, 7500), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002);//31 5
	SetObstacle(D3DXVECTOR3(8820, 0, 4700), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 6
	SetObstacle(D3DXVECTOR3(3640, 0, 8170), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 7
	SetObstacle(D3DXVECTOR3(8620, 0, 3215), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002);//31 8
	SetObstacle(D3DXVECTOR3(3850, 0, 5790), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002);//31 9
	SetObstacle(D3DXVECTOR3(3640, 0, 8170), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 10
	SetObstacle(D3DXVECTOR3(3640, 0, 8170), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 11
	SetObstacle(D3DXVECTOR3(5350, 0, 3855), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 12
	SetObstacle(D3DXVECTOR3(7270, 0, 4920), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002);//31 13
	SetObstacle(D3DXVECTOR3(7040, 0, 6020), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 14 
	SetObstacle(D3DXVECTOR3(6850, 0, 6630), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002);//31 15
	SetObstacle(D3DXVECTOR3(6240, 0, 6430), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 16
	SetObstacle(D3DXVECTOR3(6450, 0, 5830), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002);//31 17
	SetObstacle(D3DXVECTOR3(5350, 0, 5360), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 18
	SetObstacle(D3DXVECTOR3(4900, 0, 6650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002);//31 19
	SetObstacle(D3DXVECTOR3(4470, 0, 4750), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 20
	SetObstacle(D3DXVECTOR3(3850, 0, 4940), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_OFFICE002);//31 21
	SetObstacle(D3DXVECTOR3(3650, 0, 4260), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002_YOKO);//31 22
	SetObstacle(D3DXVECTOR3(4250, 0, 4070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_OFFICE002);//31 23

#endif
	//荘司担当エリア	（住宅エリア左下）
#if 1
	//横2マスエリア
	SetObstacle(D3DXVECTOR3(-580, 0, 500), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(-580, 0, 730), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(-850, 0, 530), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-880, 0, 730), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-1230, 0, 530), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-1230, 0, 730), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-1500, 0, 650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE008_YOKO);

	SetObstacle(D3DXVECTOR3(1030, 0, -1200), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(1030, 0, -970), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(1300, 0, -1170), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1310, 0, -970), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(1680, 0, -1170), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(1680, 0, -970), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1950, 0, -1070), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);

	SetObstacle(D3DXVECTOR3(-1580, 0, -220), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE009);
	SetObstacle(D3DXVECTOR3(-1970, 0, -350), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(-1970, 0, -121), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(-2330, 0, -300), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(-2300, 0, -101), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(-2500, 0, -201), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);

	SetObstacle(D3DXVECTOR3(1980, 0, 1500), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE009);
	SetObstacle(D3DXVECTOR3(2390, 0, 1370), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(2360, 0, 1599), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(2750, 0, 1390), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(2720, 0, 1589), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(2930, 0, 1519), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);

	SetObstacle(D3DXVECTOR3(180, 0, 1390), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(160, 0, 1590), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(470, 0, 1390), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(480, 0, 1610), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(800, 0, 1390), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(800, 0, 1610), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1100, 0, 1500), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);

	SetObstacle(D3DXVECTOR3(-1480, 0, -2910), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(-1460, 0, -2710), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(-1780, 0, -2910), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-1780, 0, -2690), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2140, 0, -2910), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2100, 0, -2690), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-2400, 0, -2800), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);

	SetObstacle(D3DXVECTOR3(930, 0, 2360), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(1150, 0, 2460), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(1150, 0, 2260), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(1440, 0, 2460), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(1440, 0, 2260), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(1750, 0, 2460), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1740, 0, 2260), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(1990, 0, 2350), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE001);

	//ビルセット
	SetObstacle(D3DXVECTOR3(1930, 0, -220), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	SetObstacle(D3DXVECTOR3(2285, 0, -220), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	SetObstacle(D3DXVECTOR3(2610, 0, -220), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE001);
	SetObstacle(D3DXVECTOR3(2850, 0, -220), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE001);

	SetObstacle(D3DXVECTOR3(1930, 0, -2770), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	SetObstacle(D3DXVECTOR3(2285, 0, -2770), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE000);
	SetObstacle(D3DXVECTOR3(2610, 0, -2770), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE001);
	SetObstacle(D3DXVECTOR3(2850, 0, -2770), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE001);

	//縦2マス
	SetObstacle(D3DXVECTOR3(200, 0, -1950), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008);
	SetObstacle(D3DXVECTOR3(120, 0, -1290), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(280, 0, -1270), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(190, 0, -1600), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(200, 0, -1000), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008);

	SetObstacle(D3DXVECTOR3(1060, 0, -2820), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008);
	SetObstacle(D3DXVECTOR3(980, 0, -2160), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(1130, 0, -2140), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(1050, 0,-2470), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(1060, 0, -1870), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008);

	SetObstacle(D3DXVECTOR3(-2360, 0, 2430), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2450, 0, 2180), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003_YOKO);
	SetObstacle(D3DXVECTOR3(-2270, 0, 2180), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);
	SetObstacle(D3DXVECTOR3(-2450, 0, 1900), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-2270, 0, 1920), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-2450, 0, 1620), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-2270, 0, 1670), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-2360, 0, 1430), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE000);

	SetObstacle(D3DXVECTOR3(-1510, 0, 2300), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008);
	//SetObstacle(D3DXVECTOR3(-1590, 0, 8600), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(-1430, 0, 2560), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-1590, 0, 2580), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-1440, 0, 2860), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);
	SetObstacle(D3DXVECTOR3(-1590, 0, 2860), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);

	SetObstacle(D3DXVECTOR3(-640, 0, 2430), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-570, 0, 2180), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003_YOKO);
	SetObstacle(D3DXVECTOR3(-720, 0, 2180), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);
	SetObstacle(D3DXVECTOR3(-570, 0, 1900), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-750, 0, 1920), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-570, 0, 1620), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-750, 0, 1670), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-640, 0, 1430), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE000);

	//ビル
	SetObstacle(D3DXVECTOR3(-670, 0, -2120), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE002_YOKO);
	SetObstacle(D3DXVECTOR3(-670, 0, -2680), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_OFFICE000);

	SetObstacle(D3DXVECTOR3(-670, 0, -450), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_OFFICE002_YOKO);
	SetObstacle(D3DXVECTOR3(-670, 0, -1050), D3DXVECTOR3(0, D3DX_PI*0.5f, 0), OBSTACLE_TYPE_OFFICE000);

	SetObstacle(D3DXVECTOR3(2780, 0, -1000), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE001_YOKO);
	SetObstacle(D3DXVECTOR3(2780, 0, -1250), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE001_YOKO);
	SetObstacle(D3DXVECTOR3(2780, 0, -1590), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_OFFICE001_YOKO);
	SetObstacle(D3DXVECTOR3(2780, 0, -1900), D3DXVECTOR3(0, D3DX_PI*-0.5f, 0), OBSTACLE_TYPE_OFFICE000);

	//１マス
	SetObstacle(D3DXVECTOR3(2780, 0, 650), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_PIZZASYATOU);

	SetObstacle(D3DXVECTOR3(1910, 0, 650), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_POKKURUZOU);

	SetObstacle(D3DXVECTOR3(200, 0, -2800), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_PIZZASYATOU);

	SetObstacle(D3DXVECTOR3(1920, 0, -1950), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HAIKYO);

	SetObstacle(D3DXVECTOR3(-2360, 0, 550), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-2360, 0, 750), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);

	SetObstacle(D3DXVECTOR3(-1500, 0, 1400), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(-1500, 0, 1600), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006);

	SetObstacle(D3DXVECTOR3(220, 0, 2460), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(220, 0, 2260), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);

	SetObstacle(D3DXVECTOR3(2780, 0, 2450), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(2780, 0, 2250), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	//大マス
	SetObstacle(D3DXVECTOR3(160, 0, 690), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(480, 0, 710), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(800, 0, 710), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(1100, 0, 600), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);
	SetObstacle(D3DXVECTOR3(1110, 0, -50), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);
	SetObstacle(D3DXVECTOR3(1110, 0, 240), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000_YOKO);
	SetObstacle(D3DXVECTOR3(150, 0, -100), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001_YOKO);
	SetObstacle(D3DXVECTOR3(150, 0, 190), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE003_YOKO);
	SetObstacle(D3DXVECTOR3(120, 0, 450), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(330, 0, -310), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_PIZZA);
	SetObstacle(D3DXVECTOR3(790, 0, -310), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(1080, 0, -310), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(490, 0, 50), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(800, 0, 50), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(490, 0, 360), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(800, 0, 360), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	
	SetObstacle(D3DXVECTOR3(-1460, 0, -1010), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE000);
	SetObstacle(D3DXVECTOR3(-1780, 0, -990), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2100, 0, -990), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003);
	SetObstacle(D3DXVECTOR3(-2400, 0, -1100), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE008_YOKO);
	SetObstacle(D3DXVECTOR3(-2410, 0, -1750), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007_YOKO);
	SetObstacle(D3DXVECTOR3(-2410, 0, -1460), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE000_YOKO);
	SetObstacle(D3DXVECTOR3(-1450, 0, -1760), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE006_YOKO);
	SetObstacle(D3DXVECTOR3(-1450, 0, -1510), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE003_YOKO);
	SetObstacle(D3DXVECTOR3(-1420, 0, -1250), D3DXVECTOR3(0, D3DX_PI*1.0f, 0), OBSTACLE_TYPE_HOUSE004_YOKO);
	SetObstacle(D3DXVECTOR3(-1510, 0, -2010), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE007);
	SetObstacle(D3DXVECTOR3(-1790, 0, -2010), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE006);
	SetObstacle(D3DXVECTOR3(-2090, 0, -2010), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE001);
	SetObstacle(D3DXVECTOR3(-2380, 0, -2010), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE004);
	SetObstacle(D3DXVECTOR3(-1790, 0, -1650), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(-2100, 0, -1650), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(-1790, 0, -1340), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
	SetObstacle(D3DXVECTOR3(-2100, 0, -1340), D3DXVECTOR3(0, D3DX_PI*0.0f, 0), OBSTACLE_TYPE_HOUSE002);
#endif

	//尾崎担当エリア	（ギャグエリア右下）
#if 1

	SetObstacle(D3DXVECTOR3(6200, 0, -270), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SKYTREE);					//  
	SetObstacle(D3DXVECTOR3(6200, 0, 80), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZASYATOU);						// 
	SetObstacle(D3DXVECTOR3(6200, 0, 400), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SKYTREE);				// 
	SetObstacle(D3DXVECTOR3(6650, 0, -210), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_TEMPLE);						//  
	SetObstacle(D3DXVECTOR3(7100, 0, -240), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KAISYA);					// 
	SetObstacle(D3DXVECTOR3(6200, -300, 680), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KANBAN);					//  
	SetObstacle(D3DXVECTOR3(6750, 0, 680), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_SKYTREE);		//  
	SetObstacle(D3DXVECTOR3(7100, 0, 600), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_KAISYA);			//  
	SetObstacle(D3DXVECTOR3(7100, 0, 200), D3DXVECTOR3(0, D3DX_PI * 0.0, 0), OBSTACLE_TYPE_PIZZASYATOU);			//  

	SetObstacle(D3DXVECTOR3(7900, 0, 650), D3DXVECTOR3(0, D3DX_PI * 0.5, 0), OBSTACLE_TYPE_POKUTANK);			// ポクタンク

	SetObstacle(D3DXVECTOR3(3780, 0, -210), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_TEMPLE);					// 1 
	SetObstacle(D3DXVECTOR3(4250, 0, -260), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZASYATOU);					// 1 
	SetObstacle(D3DXVECTOR3(4550, 0, -260), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE000);						// 1 

	SetObstacle(D3DXVECTOR3(7900, 0, -280), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE006);					// 1 
	SetObstacle(D3DXVECTOR3(8200, 0, -280), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE007);					// 1 
	SetObstacle(D3DXVECTOR3(8500, 0, -260), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZASYATOU);					// 1 
	SetObstacle(D3DXVECTOR3(8860, 0, -260), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE000);						// 1 

	SetObstacle(D3DXVECTOR3(3650, 0, 650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_POKUTANK);						// ポクタンク

	SetObstacle(D3DXVECTOR3(4500, 0, 650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZASYATOU);					// 
	SetObstacle(D3DXVECTOR3(4900, 0, 650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SKYTREE);						// 
	SetObstacle(D3DXVECTOR3(5300, -200, 680), D3DXVECTOR3(0, D3DX_PI * -0.5, 0), OBSTACLE_TYPE_KANBAN);							// 

	SetObstacle(D3DXVECTOR3(3620, 0, 1450), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SKYTREE);						// 	
	SetObstacle(D3DXVECTOR3(3620, 0, 1900), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KAMINARIMON_YOKO);				// 	
	SetObstacle(D3DXVECTOR3(3620, 0, 2400), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_POKKURUZOU);		// 

	SetObstacle(D3DXVECTOR3(5300, 0, 1450), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SKYTREE);						// 
	SetObstacle(D3DXVECTOR3(5360, 0, 2220), D3DXVECTOR3(0, D3DX_PI * 0.0, 0), OBSTACLE_TYPE_TEMPLE_YOKO);	// 
	SetObstacle(D3DXVECTOR3(5300, 0, 1700), D3DXVECTOR3(0, D3DX_PI * -0.5, 0), OBSTACLE_TYPE_POKKURUZOU);		// 

	SetObstacle(D3DXVECTOR3(5400, 0, -1130), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZASYATOU);					// 
	SetObstacle(D3DXVECTOR3(5300, 0, -670), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KAMINARIMON_YOKO);				// 
	SetObstacle(D3DXVECTOR3(5300, 0, -200), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_POKKURUZOU);		// 

	SetObstacle(D3DXVECTOR3(6200, 0, -1050), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SKYTREE);						// 
	SetObstacle(D3DXVECTOR3(6200, 0, -1550), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_TEMPLE_YOKO);	// 
	SetObstacle(D3DXVECTOR3(6200, 0, -2000), D3DXVECTOR3(0, D3DX_PI * -0.0, 0), OBSTACLE_TYPE_HOUSE004_YOKO);

	SetObstacle(D3DXVECTOR3(8100, 0, -1900), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_FLOUR);
	SetObstacle(D3DXVECTOR3(7800, 0, -1900), D3DXVECTOR3(0, D3DX_PI * -1.0, 0), OBSTACLE_TYPE_FLOUR);
	SetObstacle(D3DXVECTOR3(7900, 0, -2100), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_FLOUR_YOKO);
	SetObstacle(D3DXVECTOR3(7900, 0, -1800), D3DXVECTOR3(0, D3DX_PI * -1.0, 0), OBSTACLE_TYPE_FLOUR_YOKO);
	SetObstacle(D3DXVECTOR3(7940, 0, -1950), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_TENGA);

	SetObstacle(D3DXVECTOR3(6280, 0, -2800), D3DXVECTOR3(0, D3DX_PI * -0.5, 0), OBSTACLE_TYPE_POKUTANK);

	SetObstacle(D3DXVECTOR3(8720, 0, 2320), D3DXVECTOR3(0, D3DX_PI * 0.0, 0), OBSTACLE_TYPE_OFFICE001_YOKO);

	SetObstacle(D3DXVECTOR3(5300, 0, -1800), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_HOUSE003);			// 
	SetObstacle(D3DXVECTOR3(5300, 0, -2150), D3DXVECTOR3(0, D3DX_PI * 0.0, 0), OBSTACLE_TYPE_HOUSE005_YOKO);		// 
	SetObstacle(D3DXVECTOR3(5300, -200, -2600), D3DXVECTOR3(0, D3DX_PI * 0.5, 0), OBSTACLE_TYPE_KANBAN);	// 

	SetObstacle(D3DXVECTOR3(6980, 0, -1900), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_KOUZISYA);			// 
	SetObstacle(D3DXVECTOR3(7160, 0, -1900), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_KOUZISYA);			// 
	SetObstacle(D3DXVECTOR3(6980, 0, -2700), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZISYA);			// 
	SetObstacle(D3DXVECTOR3(7160, 0, -2700), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZISYA);			// 
	SetObstacle(D3DXVECTOR3(7070, 0, -2330), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_TUTI);			// 
	SetObstacle(D3DXVECTOR3(6840, 0, -2480), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI_YOKO);			// 
	SetObstacle(D3DXVECTOR3(6840, 0, -2150), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI_YOKO);			// 
	SetObstacle(D3DXVECTOR3(7280, 0, -2480), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI_YOKO);			// 
	SetObstacle(D3DXVECTOR3(7280, 0, -2150), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI_YOKO);			//

	SetObstacle(D3DXVECTOR3(4450, 0, 1490), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_POPUTANK);						// ポプタンク 

	SetObstacle(D3DXVECTOR3(6200, 0, 2360), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_POPUTANK);						// ポプタンク 

	SetObstacle(D3DXVECTOR3(7080, 0, 2350), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_PIZZASYATOU);					// 
	SetObstacle(D3DXVECTOR3(7370, 0, 2350), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE004);					//  
	SetObstacle(D3DXVECTOR3(7640, 0, 2350), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE003);					//  

	SetObstacle(D3DXVECTOR3(7900, 0, 2350), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_POKKURUZOU);					//  

	SetObstacle(D3DXVECTOR3(8800, 0, -1100), D3DXVECTOR3(0, D3DX_PI * 0.5, 0), OBSTACLE_TYPE_KAISYA);			//  
	SetObstacle(D3DXVECTOR3(8800, -200, -1500), D3DXVECTOR3(0, D3DX_PI * 0.5, 0), OBSTACLE_TYPE_KANBAN);			//  
	SetObstacle(D3DXVECTOR3(8800, 0, -1900), D3DXVECTOR3(0, D3DX_PI * 0.5, 0), OBSTACLE_TYPE_KAISYA);			//  

	SetObstacle(D3DXVECTOR3(7800, 0, -1080), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_TEMPLE);						//  
	SetObstacle(D3DXVECTOR3(7100, 0, -1080), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE003);						//  

	SetObstacle(D3DXVECTOR3(8600, 0, -2800), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_HAKASEHOUSE);		//  

	
	SetObstacle(D3DXVECTOR3(8010, 0, -2780), D3DXVECTOR3(0, D3DX_PI * 0.5, 0), OBSTACLE_TYPE_POPUTANK);		//  

	SetObstacle(D3DXVECTOR3(7080, 0, 1550), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_USHI);							// 
	SetObstacle(D3DXVECTOR3(6710, 0, 1550), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_TAMAGO);						// 
	SetObstacle(D3DXVECTOR3(6310, 0, 1550), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BASTAR);						// 

	SetObstacle(D3DXVECTOR3(7880, 0, 1550), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE001);						// 
	SetObstacle(D3DXVECTOR3(8170, 0, 1550), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HOUSE007);						// 
	SetObstacle(D3DXVECTOR3(8480, 0, 1550), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KAISYA);						// 
	SetObstacle(D3DXVECTOR3(8850, -200, 1480), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KANBAN);						// 

	SetObstacle(D3DXVECTOR3(8830, 0, 630), D3DXVECTOR3(0, D3DX_PI * 0.0, 0), OBSTACLE_TYPE_USHI);				// 
																												//前
	SetObstacle(D3DXVECTOR3(7200, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(7060, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6920, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6780, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6640, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6500, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6360, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6220, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6080, 0, 1300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
																										//後																								
	SetObstacle(D3DXVECTOR3(7200, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(7060, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6920, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6780, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6640, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6500, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6360, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6220, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					// 
	SetObstacle(D3DXVECTOR3(6080, 0, 1720), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU);					//
																										//左
	SetObstacle(D3DXVECTOR3(6013, 0, 1650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU_YOKO);					//
	SetObstacle(D3DXVECTOR3(6013, 0, 1510), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU_YOKO);					//
	SetObstacle(D3DXVECTOR3(6013, 0, 1370), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU_YOKO);					//
																											//右
	SetObstacle(D3DXVECTOR3(7267, 0, 1650), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU_YOKO);					//
	SetObstacle(D3DXVECTOR3(7267, 0, 1510), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU_YOKO);					//
	SetObstacle(D3DXVECTOR3(7267, 0, 1370), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_SAKU_YOKO);					//

	SetObstacle(D3DXVECTOR3(4400, 0, 2500), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZISYA);						//
	SetObstacle(D3DXVECTOR3(4600, 0, 2500), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZISYA);						//  
	SetObstacle(D3DXVECTOR3(4400, 0, 2200), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI);					//
	SetObstacle(D3DXVECTOR3(4600, 0, 2200), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI);					//w
	SetObstacle(D3DXVECTOR3(4300, 0, 2300), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI_YOKO);			//  
	SetObstacle(D3DXVECTOR3(4300, 0, 2700), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI_YOKO);			//  
	SetObstacle(D3DXVECTOR3(4700, 0, 2300), D3DXVECTOR3(0, D3DX_PI * -1.0f, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI_YOKO);			//  
	SetObstacle(D3DXVECTOR3(4700, 0, 2700), D3DXVECTOR3(0, D3DX_PI * -1.0f, 0), OBSTACLE_TYPE_KOUZIHYOUSIKI_YOKO);			//  
	SetObstacle(D3DXVECTOR3(4400, 0, 2800), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_KOUZIIN);					//
	SetObstacle(D3DXVECTOR3(4600, 0, 2800), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_KOUZIIN);					//

	SetObstacle(D3DXVECTOR3(3500, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(3600, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(3700, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(3800, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(3900, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4000, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4100, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4200, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4300, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4400, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4500, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4600, 0, -930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST);					//

	SetObstacle(D3DXVECTOR3(3500, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(3600, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(3700, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(3800, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(3900, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4000, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4100, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4200, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4300, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4400, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4500, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//
	SetObstacle(D3DXVECTOR3(4600, 0, -2070), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST);					//

	SetObstacle(D3DXVECTOR3(3480, 0, -1030), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1130), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1230), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1330), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1430), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1530), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1630), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1730), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1830), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -1930), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(3480, 0, -2030), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_BRIST_YOKO);					//

	SetObstacle(D3DXVECTOR3(4620, 0, -1030), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(4620, 0, -1130), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(4620, 0, -1230), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(4620, 0, -1330), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					//
	SetObstacle(D3DXVECTOR3(4620, 0, -1430), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					
	SetObstacle(D3DXVECTOR3(4620, 0, -1530), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					
	SetObstacle(D3DXVECTOR3(4620, 0, -1630), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					
	SetObstacle(D3DXVECTOR3(4620, 0, -1730), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					
	SetObstacle(D3DXVECTOR3(4620, 0, -1830), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					
	SetObstacle(D3DXVECTOR3(4620, 0, -1930), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					
	SetObstacle(D3DXVECTOR3(4620, 0, -2030), D3DXVECTOR3(0, D3DX_PI * 1.0f, 0), OBSTACLE_TYPE_BRIST_YOKO);					

	SetObstacle(D3DXVECTOR3(3650, 0, -2800), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_HOUSE005);					
	SetObstacle(D3DXVECTOR3(4280, 0, -2800), D3DXVECTOR3(0, D3DX_PI * 1.0, 0), OBSTACLE_TYPE_OFFICE002);				

	SetObstacle(D3DXVECTOR3(4000, 0, -1530), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HAKASEHOUSE_YOKO);					

	SetObstacle(D3DXVECTOR3(3650, 0, -1500), D3DXVECTOR3(0, 0, 0), OBSTACLE_TYPE_HAKASE_YOKO);
#endif
	//ゴールのセット
	SetGoal(D3DXVECTOR3(2400, 0, 7200), 0);
	//ホームのセット
	//SetHome(D3DXVECTOR3(0, 0, 100), 0);

	// 通行人

	// 目黒のエリア
	SetPassage(D3DXVECTOR3(-450.0f, 0.0f, 3100.0f), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), 0, 1, 700, 0.3f, false);
	SetPassage(D3DXVECTOR3(-450.0f, 0.0f, 5950.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 700, 0.3f, true);
	SetPassage(D3DXVECTOR3(-850.0f, 0.0f, 8550.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 700, 0.3f, true);
	SetPassage(D3DXVECTOR3(-1650.0f, 0.0f, 6870.0f), D3DXVECTOR3(0.0f, D3DX_PI * -0.5f, 0.0f), 0, 0, 700, 0.3f, true);
	SetPassage(D3DXVECTOR3(-2500.0f, 0.0f, 3440.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 0, 700, 0.3f, true);
	SetPassage(D3DXVECTOR3(850.0f, 0.0f, 5900.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 700, 0.3f, true);
	SetPassage(D3DXVECTOR3(2000.0f, 0.0f, 6450.0f), D3DXVECTOR3(0.0f, -D3DX_PI * 0.5, 0.0f), 0, 0, 400, 0.3f, true);
	SetPassage(D3DXVECTOR3(1750.0f, 0.0f, 6800.0f), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), 0, 1, 250, 0.3f, false);
	SetPassage(D3DXVECTOR3(3000.0f, 0.0f, 6800.0f), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), 0, 1, 250, 0.3f, false);

	//尾崎エリア
	SetPassage(D3DXVECTOR3(450.0f, 0.0f, 840.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 0, 720, 0.3f, true);
	SetPassage(D3DXVECTOR3(1250.0f, 0.0f, 240.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 620, 0.3f, true);
	SetPassage(D3DXVECTOR3(-450.0f, 0.0f, -2000.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 620, 0.3f, true);
	SetPassage(D3DXVECTOR3(-850.0f, 0.0f, -2000.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 620, 0.3f, true);

	SetPassage(D3DXVECTOR3(7300.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 620, 0.3f, true);
	SetPassage(D3DXVECTOR3(7800.0f, 0.0f, 1340.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 0, 520, 0.3f, true);
	SetPassage(D3DXVECTOR3(7120.0f, 0.0f, 2200.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 0, 520, 0.3f, true);

	SetPassage(D3DXVECTOR3(7050.0f, 0.0f, -850.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 0, 620, 0.3f, true);
	SetPassage(D3DXVECTOR3(8580.0f, 0.0f, -1020.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 620, 0.3f, true);
	SetPassage(D3DXVECTOR3(5550.0f, 0.0f, -400.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 300, 0.3f, true);
	SetPassage(D3DXVECTOR3(5550.0f, 0.0f, -1800.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 350, 0.3f, true);
	SetPassage(D3DXVECTOR3(4000.0f, 0.0f, -2600.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 0, 350, 0.3f, true);
	SetPassage(D3DXVECTOR3(3000.0f, 0.0f, -1400.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 350, 0.3f, true);
	SetPassage(D3DXVECTOR3(410.0f, 0.0f, -1000.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 350, 0.3f, true);
	SetPassage(D3DXVECTOR3(-410.0f, 0.0f, -500.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 350, 0.3f, true);

	SetPassage(D3DXVECTOR3(4800.0f, 0.0f, 450.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 0, 350, 0.3f, true);
	SetPassage(D3DXVECTOR3(3000.0f, 0.0f, 800.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 350, 0.3f, true);
	SetPassage(D3DXVECTOR3(3850.0f, 0.0f, 2000.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 1, 350, 0.3f, true);
	SetPassage(D3DXVECTOR3(6850.0f, 0.0f, 850.0f), D3DXVECTOR3(0.0f, D3DX_PI * 0.0f, 0.0f), 0, 0, 720, 0.3f, true);

	//稲井エリア
	SetPassage(D3DXVECTOR3(4700.0f, 0.0f, 8900.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0, 1, 400, 0.3f, true);
	SetPassage(D3DXVECTOR3(5130.0f, 0.0f, 8400.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0, 1, 500, 0.3f, true);
	SetPassage(D3DXVECTOR3(5550.0f, 0.0f, 6750.0f), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), 0, 1, 400, 0.3f, false);
	SetPassage(D3DXVECTOR3(7270.0f, 0.0f, 5700.0f), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), 0, 1, 1200, 0.3f, false);
	SetPassage(D3DXVECTOR3(7720.0f, 0.0f, 5150.0f), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), 0, 1, 800, 0.3f, false);
	SetPassage(D3DXVECTOR3(8150.0f, 0.0f, 5000.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0, 1, 650, 0.3f, true);
	SetPassage(D3DXVECTOR3(6870.0f, 0.0f, 3100.0f), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), 0, 1, 600, 0.3f, false);
	SetPassage(D3DXVECTOR3(7280.0f, 0.0f, 3100.0f), D3DXVECTOR3(0.0f, D3DX_PI * 1.0f, 0.0f), 0, 1, 600, 0.3f, false);
	SetPassage(D3DXVECTOR3(7900.0f, 0.0f, 3000.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0, 1, 270, 0.3f, true);
	SetPassage(D3DXVECTOR3(3430.0f, 0.0f, 4800.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0, 1, 1000, 0.3f, true);
	SetPassage(D3DXVECTOR3(3950.0f, 0.0f, 3865.0f), D3DXVECTOR3(0.0f, -D3DX_PI * 0.5, 0.0f), 0, 0, 700, 0.3f, true);
	SetPassage(D3DXVECTOR3(6150.0f, 0.0f, 5150.0f), D3DXVECTOR3(0.0f, -D3DX_PI * 0.5, 0.0f), 0, 0, 700, 0.3f, true);
	SetPassage(D3DXVECTOR3(5370.0f, 0.0f, 6000.0f), D3DXVECTOR3(0.0f, -D3DX_PI * -0.5, 0.0f), 0, 0, 500, 0.3f, false);
	SetPassage(D3DXVECTOR3(3300.0f, 0.0f, 6450.0f), D3DXVECTOR3(0.0f, -D3DX_PI * 0.5, 0.0f), 0, 0, 700, 0.2f, true);
	SetPassage(D3DXVECTOR3(7100.0f, 0.0f, 6850.0f), D3DXVECTOR3(0.0f, -D3DX_PI * -0.5, 0.0f), 0, 0, 600, 0.3f, false);	
	SetPassage(D3DXVECTOR3(4680.0f, 0.0f, 7710.0f), D3DXVECTOR3(0.0f, -D3DX_PI * -0.5, 0.0f), 0, 0, 700, 0.3f, false);
	SetPassage(D3DXVECTOR3(8000.0f, 0.0f, 5130.0f), D3DXVECTOR3(0.0f, -D3DX_PI * 0.5, 0.0f), 0, 0, 700, 0.2f, true);
	SetPassage(D3DXVECTOR3(8850.0f, 0.0f, 5580.0f), D3DXVECTOR3(0.0f, -D3DX_PI * -0.5, 0.0f), 0, 0, 600, 0.3f, false);
	SetPassage(D3DXVECTOR3(4440.0f, 0.0f, 3000.0f), D3DXVECTOR3(0.0f, -D3DX_PI * 0.5, 0.0f), 0, 0, 1000, 0.5f, true);
	
	// 車
	SetCar(D3DXVECTOR3(-2711.0f, 0.0f, -3100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 0, 1, 2200, 1.2f, false);
	SetCar(D3DXVECTOR3(-2886.0f, 0.0f, 9200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1, 1, 2200, 1.2f, true);
	SetCar(D3DXVECTOR3(-120.0f, 0.0f, -3100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 0, 1, 2200, 1.2f, false);
	SetCar(D3DXVECTOR3(-300.0f, 0.0f, 9200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1, 1, 2200, 1.2f, true);
	SetCar(D3DXVECTOR3(3296.0f, 0.0f, -3100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 2, 1, 2200, 1.2f, false);
	SetCar(D3DXVECTOR3(3126.0f, 0.0f, 9200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1, 1, 2200, 1.2f, true);
	SetCar(D3DXVECTOR3(5878.0f, 0.0f, -3100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 0, 1, 2200, 1.2f, false);
	SetCar(D3DXVECTOR3(5708.0f, 0.0f, 9200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1, 1, 2200, 1.2f, true);

	SetCar(D3DXVECTOR3(-3212.0f, 0.0f, 999.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 4, 0, 2200, 1.2f, true);
	SetCar(D3DXVECTOR3(9212.0f, 0.0f, 1170.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 7, 0, 2200, 1.2f, false);
	SetCar(D3DXVECTOR3(-3212.0f, 0.0f, 7012.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 6, 0, 2200, 1.2f, true);
	SetCar(D3DXVECTOR3(9212.0f, 0.0f, 7183.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 5, 0, 2200, 1.2f, false);

	// 目黒のエリア（車)
	SetCar(D3DXVECTOR3(1260.0f, 0.0f, 5855.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 0, 1, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(-2145.0f, 0.0f, 7355.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 2, 1, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(1329.0f, 0.0f, 3700.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 2, 1, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(446.0f, 0.0f, 8473.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1, 1, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(2523.0f, 0.0f, 8314.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 3, 1, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(-1323.0f, 0.0f, 3950.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1, 1, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(-1690.0f, 0.0f, 4752.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 1, 1, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(815.0f, 0.0f, 3722.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 3, 1, 2200, 0.0f, true);		// 縦の配置

	SetCar(D3DXVECTOR3(1758.0f, 0.0f, 4698.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 6, 0, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(2421.0f, 0.0f, 7756.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 4, 0, 2200, 0.0f, true);		// 横の配置

	// 稲井のエリア（車)
	SetCar(D3DXVECTOR3(5439.0f, 0.0f, 6489.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 3, 0, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(5529.0f, 0.0f, 6489.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 3, 0, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(5329.0f, 0.0f, 6789.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 1, 0, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(5429.0f, 0.0f, 6789.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 2, 0, 2200, 0.0f, false);			// 縦の配置

	SetCar(D3DXVECTOR3(5466, 0.0f, 5850.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 6, 0, 2200, 0.0f, false);
	SetCar(D3DXVECTOR3(5236, 0.0f, 5850.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 6, 0, 2200, 0.0f, false);		// 横の配置

	// //尾崎担当エリア	（車）
	SetCar(D3DXVECTOR3(-1670.0f, 0.0f, 1410.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 3, 0, 2200, 0.0f, false);		// 縦の配置

	SetCar(D3DXVECTOR3(-1249.0f, 0.0f, 356.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 6, 0, 2200, 0.0f, false);		// 横の配置

	////オブジェクトの配置
	//for (int nCntBlock = 0; nCntBlock < sizeof g_aBlockInfo / sizeof(BlockInfo); nCntBlock++)
	//{
	//	SetBlock(g_aBlockInfo[nCntBlock].pos, g_aBlockInfo[nCntBlock].fWidth, g_aBlockInfo[nCntBlock].fHeight, g_aBlockInfo[nCntBlock].BlockType, g_aBlockInfo[nCntBlock].moveCounter);
	//}
	////アイテムの配置
	//for (int nCntItem = 0;  nCntItem  < sizeof g_aItemInfo / sizeof(ItemInfo); nCntItem++)
	//{
	//	SetItem(g_aItemInfo[nCntItem].pos, g_aItemInfo[nCntItem].col, g_aItemInfo[nCntItem].ItemType);
	//}	

	g_GameState = GAMESTATE_NONE;
	g_nCounterGameState = 0;
	int g_nCounteeCar = 0;
	g_bPouse = false;
	g_bChange = false;						// falseに設定
}
//=============================================================================
// 終了処理
//=============================================================================
void UninitGame(void)
{	
	// カメラの終了処理
	UninitCamera();
	// ライトの終了処理
	UninitLight();
	// ポリゴンの終了処理
	UninitPolygon();
	// プレイヤーの終了処理
	UninitPlayer();
	// 通行人の終了処理
	UninitPassage();
	// 壁の終了処理
	//UninitWall();
	// 影の終了処理
	UninitShadow();
	// モデルの終了処理
	UninitModel();
	// 矢印の終了処理
	UninitArrow();
	// ビルボードの終了処理
	UninitBillboard();
	// 弾の終了処理
	UninitBullet();
	// エフェクトの終了処理
	UninitEffect();
	// 爆発の終了処理
	UninitExplosion();
	//メッシュフィールドの終了処理
	//UninitMeshField();
	//メッシュウォールの終了処理
	UninitMeshWall();
	//メッシュシリンダーの終了処理
	UninitMeshCylinder();
	//ポーズの終了処理
	UninitPause();
	//プレスエンター
	UninitPressEnter();
	//タイム終了処理
	UninitTime();
	//タイムフレーム終了処理
	UninitTimeFrame();
	// マップの終了処理
	UninitMap();
	// ゴールの終了処理
	UninitGoal();
	// ゲージの終了処理
	UninitGauge();
	// ブラー
	UninitBlur();
	// ポックル
	UninitPokuru();
	// 敵
	UninitEnemy();
	// 車
	UninitCar();
	// パーティクル
	UninitParticle();
	//　テクスチャモデル
	UninitObstacle();
	// ホーム
	UninitHome();
	// ピザデス
	UninitDeathPizza();
}
//=============================================================================
// 更新処理
//=============================================================================
void UpdateGame(void)
{
	JoyState pJoyState = GetJoystate();
	XINPUT_STATE state;
	PLAYER *pPlayer = GetPlayer();
	XInputGetState(0, &state);
	int nRand = 0;

	if (GetKeyboardTrigger(DIK_P) == true || (state.Gamepad.wButtons & XINPUT_GAMEPAD_START  && pJoyState.bConnectionJoypad == true))
	{
		if (g_JoyStateGame.nJoypadState == INPUT_JOYSTATE_NOTPUSH)
		{
			PlaySound(SOUND_LABEL_SE_PAUSE);
			g_bPouse = g_bPouse ? false : true;
		}
		g_JoyStateGame.nJoypadState = INPUT_JOYSTATE_PUSH;
	}
	g_Pause = GetPauseMode();

	if (g_bPouse == false)
	{
		if (GetKeyboardTrigger(DIK_RETURN) == true || (state.Gamepad.wButtons & XINPUT_GAMEPAD_X  && pJoyState.bConnectionJoypad == true))
		{	// モードの切り替え
			if (g_JoyStateGame.nJoypadState == INPUT_JOYSTATE_NOTPUSH)
			{
				g_bChange = g_bChange ? false : true;
			}

			g_JoyStateGame.nJoypadState = INPUT_JOYSTATE_PUSH;
		}
		// カメラの更新処理
		UpdateCamera();
		// ライトの更新処理
		UpdateLight();
		// ポリゴンの更新処理
		UpdatePolygon();
		// プレイヤー更新処理
		UpdatePlayer();
		// 壁の更新処理
		//UpdateWall();
		// 影の更新処理
		UpdateShadow();
		// モデルの更新処理
		UpdateModel();
		// ビルボードの更新処理
		UpdateBillboard();
		//弾の更新処理
		UpdateBullet();
		//エフェクトの更新処理
		UpdateEffect();
		// 爆発の更新処理
		UpdateExplosion();
		//メッシュフィールドの更新処理
		//UpdateMeshField();
		//メッシュウォールの更新処理
		UpdateMeshWall();
		//メッシュシリンダーの更新処理
		UpdateMeshCylinder();
		//プレスエンター更新処理
		UpdatePressEnter();
		//タイム更新処理
		UpdateTime();
		//タイムフレーム更新処理
		UpdateTimeFrame();
		// 矢印の更新処理
		UpdateArrow();
		// マップの更新処理
		UpdateMap();
		// ゴールの更新処理
		UpdateGoal();
		// マップの更新処理
		UpdateMap();
		// ブラーの更新処理
		UpdateBlur();
		// ポックルの更新処理
		UpdatePokuru();
		// 通行人の更新処理
		UpdatePassage();
		// 敵
		UpdateEnemy();
		// 車
		UpdateCar();
		// パーティクル
		UpdateParticle();
		//　テクスチャモデル
		UpdateObstacle();
		//	ホーム
		UpdateHome();
		// ピザデス
		UpdateDeathPizza();

		g_nCounteeCar++;
		if ((g_nCounteeCar % 400) == 0)
		{
			nRand = rand() % 4 + 0;
			SetCar(D3DXVECTOR3(-2711.0f, 0.0f, -3100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), nRand, 1, 2200, 1.2f, false);
			SetCar(D3DXVECTOR3(-2886.0f, 0.0f, 9200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), nRand, 1, 2200, 1.2f, true);
			SetCar(D3DXVECTOR3(-120.0f, 0.0f, -3100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), nRand, 1, 2200, 1.2f, false);
			SetCar(D3DXVECTOR3(-300.0f, 0.0f, 9200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), nRand, 1, 2200, 1.2f, true);
			SetCar(D3DXVECTOR3(3296.0f, 0.0f, -3100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), nRand, 1, 2200, 1.2f, false);
			SetCar(D3DXVECTOR3(3126.0f, 0.0f, 9200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), nRand, 1, 2200, 1.2f, true);
			SetCar(D3DXVECTOR3(5878.0f, 0.0f, -3100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), nRand, 1, 2200, 1.2f, false);
			SetCar(D3DXVECTOR3(5708.0f, 0.0f, 9200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), nRand, 1, 2200, 1.2f, true);
			SetCar(D3DXVECTOR3(-3212.0f, 0.0f, 999.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), nRand + 4, 0, 2200, 1.2f, true);
			SetCar(D3DXVECTOR3(9212.0f, 0.0f, 1170.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), nRand + 4, 0, 2200, 1.2f, false);
			SetCar(D3DXVECTOR3(-3212.0f, 0.0f, 7012.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), nRand + 4, 0, 2200, 1.2f, true);
		}

		//if (g_bChange == true)
		if (pPlayer->PizzaMode == PLAYERPIZZA_PIZZA)
		{	// Pizzaモードなら
			UpdateGauge();			// ゲージの更新処理
		}

	}
	else
	{	//ポーズ更新処理
		UpdatePause();
		if (*g_Pause == SELECTMODE_CONTINUE)
		{
			g_bPouse = g_bPouse ? false : true;
			*g_Pause = SELECTMODE_NONE;
		}
	}

	switch (g_GameState)
	{
	case GAMESTATE_NORMAL:
		break;
	case GAMESTATE_GAMECLEAR:
		g_nCounterGameState++;
		if (g_nCounterGameState >= 30)
		{
			g_GameState = GAMESTATE_NONE;
			//画面モードの設定
			SetFade(MODE_RESULT);
		}
		break;
	case GAMESTATE_GAMEOVER:
		g_nCounterGameState++;
		if (g_nCounterGameState >= 40)
		{
			g_GameState = GAMESTATE_NONE;
			//画面モードの設定
			SetFade(MODE_GAMEOVER);
		}
		break;
	}
	//ジョイパッドの状態更新
	if (g_JoyStateGame.nJoypadState == INPUT_JOYSTATE_PUSH)
	{
		g_JoyStateGame.nJoypadState = INPUT_JOYSTATE_NONE;
	}
	else if (g_JoyStateGame.nJoypadState == INPUT_JOYSTATE_NONE)
	{
		g_JoyStateGame.nJoypadState = INPUT_JOYSTATE_NOTPUSH;
	}
}
//=============================================================================
// 描画処理
//=============================================================================
void DrawGame(void)
{
	// カメラの設定
	//SetCamera(0);
	// ポリゴンの描画処理
	DrawPolygon();
	// 壁の描画処理
	//DrawWall();
	//メッシュフィールドの描画処理
	//DrawMeshField();
	//メッシュウォールの描画処理
	//DrawMeshWall();
	//メッシュシリンダーの描画処理
	//DrawMeshCylinder();
	// ビルボードの描画処理
	DrawBillboard();
	// 影の描画処理
	DrawShadow();
	// 弾の描画処理
	DrawBullet();
	// エフェクトの描画処理
	DrawEffect();
	// 爆発の描画処理
	DrawExplosion();

	// モデルの描画処理
	DrawModel();
	//プレイヤーの描画
	DrawPlayer();
	//プレスエンター描画処理
	DrawPressEnter();	
	// 通行人の描画処理
	DrawPassage();
	// 車
	DrawCar();
	// 矢印の描画処理
	DrawArrow();
	//　テクスチャモデル
	DrawObstacle();
	// ポックル
	DrawPokuru();
	// 敵
	DrawEnemy();
	// ゴールの描画処理
	DrawGoal();
	//ホーム
	DrawHome();
	// パーティクル
	DrawParticle();
	// マップの描画処理
	//DrawMap();
	// ゲージの描画処理
	DrawGaugee();
	//タイムフレーム描画処理
	DrawTimeFrame();
	//タイム描画処理
	DrawTime();
	// ブラー
	//DrawBlur();
	// ピザデス
	DrawDeathPizza();

	if (g_bPouse == true)
	{
		//ポーズの描画
		DrawPause();
	}
}

//=============================================================================
// ゲーム状態の設定
//=============================================================================
void SetGameState(GAMESTATE state)
{
	g_GameState = state;
	g_nCounterGameState = 0;
}

//=============================================================================
// ゲームの状態の取得
//=============================================================================
GAMESTATE GetGameState(void)
{
	return g_GameState;
}
//=============================================================================
// ゲージの状態の取得
//=============================================================================
void SetGaugeState(bool bChange)
{
	g_bChange = bChange;
}