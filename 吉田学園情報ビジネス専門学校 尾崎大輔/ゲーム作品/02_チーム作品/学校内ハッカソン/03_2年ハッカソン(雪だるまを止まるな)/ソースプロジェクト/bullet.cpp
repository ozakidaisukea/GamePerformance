//=============================================================================
//
// 弾の処理 [bullte.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "bullet.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBullet::m_pTexture = NULL;

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// オブジェクトのコンストラクタ
//=============================================================================
CBullet::CBullet() : CBillboard(3)
{
	m_nLife = 0;								//体力初期値
	m_move = D3DXVECTOR3(1.0f, 0.0f, 0.0f);		//移動量初期値
}
//=============================================================================
// オブジェクトのデストラクタ
//=============================================================================
CBullet::~CBullet()
{

}

//=============================================================================
//オブジェクトの生成
//=============================================================================
CBullet *CBullet::Create(D3DXVECTOR3 pos,float fWidth,float fHeight,D3DXVECTOR3 move)
{
	CBullet *pBullet = NULL;

	if (pBullet == NULL)
	{
		pBullet = new CBullet;				//シーンの動的確保
		pBullet->SetPos(pos);				//位置の代入
		pBullet->m_move = move;				//移動量の代入
		pBullet->SetWidth(fWidth);			//幅の代入
		pBullet->SetHeight(fHeight);		//高さの代入
		pBullet->Init();					//初期化処理
		pBullet->BindTexture(m_pTexture);
	}
	return pBullet;							//値を返す
}

//=============================================================================
// オブジェクトのテクスチャ読み込み
//=============================================================================
HRESULT CBullet::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		TEXTURE_NAME001,
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// オブジェクトのテクスチャ破棄
//=============================================================================
void CBullet::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
//=============================================================================
// オブジェクトの初期化処理
//=============================================================================
HRESULT CBullet::Init(void)
{
	//CBillboardの初期化処理
	CBillboard::Init();
	//種類の設定
	return S_OK;
}

//=============================================================================
// オブジェクトの終了処理
//=============================================================================
void CBullet::Uninit(void)
{
	//CBillboardの終了処理
	CBillboard::Uninit();
}

//=============================================================================
// オブジェクトの更新処理
//=============================================================================
void CBullet::Update(void)
{
	//弾の当たり判定
	Collision();

	//CBillboardの更新処理
	CBillboard::Update();
}

//=============================================================================
// オブジェクトの描画処理
//=============================================================================
void CBullet::Draw(void)
{
	//CBillboardの描画処理
	CBillboard::Draw();
}
//=============================================================================
// 弾の当たり判定
//=============================================================================
void CBullet::Collision(void)
{
	D3DXVECTOR3 pos;			//位置
	D3DXVECTOR3 rot;			//位置　
	bool bDisappear = false;	//消滅してるかどうか

	pos = GetPos();				//位置の取得
	m_nLife++;					//体力の加算
	pos += m_move;				//座標の代入

	//位置の設置
	SetPos(pos);
	if (m_nLife > 50)
	{
		//終了処理
		Uninit();
	}
}